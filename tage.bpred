#include "ooo_cpu.h"
#include <bitset>
#include <cstdlib>
#include <time.h>
#include <fstream>
#include <iostream>
#include <string>
#include <cmath>


using namespace std;

bitset<1001> *GHR;                  // Global History Register       
uint32_t PHR;                       // Path History Register 
const uint32_t num_tables = 13;
int32_t altBetterCount;             // Number of times Alternate was better
uint8_t predDir;                    // Direction of pred (Taken or Not-taken?)

const uint32_t HIST[] = {2, 3, 8, 12, 17, 33, 35, 67, 97, 138, 195, 330, 517, 1193, 1741, 1930};
const uint32_t TAGE_TABLE_SIZE[] = {9,9,10,10,10,10,11,11,11,11,12,12,11,11,10,10};
const uint32_t TAGE_TAG_SIZE[] = {16, 15, 14, 14, 13, 13, 12, 12, 11, 10, 9, 9, 9, 8, 8, 7};



uint32_t *tage_tag;
class predictionval{
    public:
    uint32_t tabpred ;
    uint32_t index_pred;
    uint32_t alttabpred ;
    uint32_t alt_index_pred;
    uint32_t pred_pred;
    uint32_t alt_pred;
    predictionval(){
        tabpred = num_tables;
        index_pred = 0;
        alttabpred = num_tables;
        alt_index_pred = 0;
    }
};  
predictionval predval;

typedef struct CircularShiftRegister { 
    uint16_t val;
    uint16_t oldlen;
    uint16_t newlen;
} CircularShiftRegister_t;

CircularShiftRegister_t *csrIndex;  // Circular Shift Register for indexing
CircularShiftRegister_t **csrTag;   // Circular Shift Registers for tags [2 of them]

class block{
public:
    uint32_t tag;
    uint32_t counter;
    uint32_t prediction;
    block(){
        tag = 0;
        counter = 0;
        prediction = 0;
    }
    
};
class bimodal{
public:
   uint32_t predic ;
};
class bimodal_table{
    public:
    bimodal * bimodel;
    int bimodal_size = 13;
    int bimodal_bits = 2;
    int clock;
    bool clock_state;
    bimodal_table(){
        //cout << (1 << bimodal_size) << endl;
        bimodel = new bimodal[(1 << bimodal_size)];
        for(int i = 0; i < (1 << bimodal_size); i++){
            bimodel[i].predic = 0;
        }
        clock = 0;
        clock_state = 0;
    }
};
bimodal_table *bimodal1;
bimodal_table liki;


class table1{
public:
    block *blocks;
    uint32_t size;
    uint32_t tage_index;
    uint32_t tag_bits;
    uint32_t prediction;
    uint32_t counter;
    uint32_t hist;
    void initialize(uint32_t size,uint32_t hist,uint32_t tag_bits){
        this->size = size;
        // this->index_bits = index_bits;
        this->hist = hist;
        this->tag_bits = tag_bits;
        blocks = new block[size];
      }
};
table1 *tage1;

void O3_CPU::initialize_branch_predictor()
{   
    //cout << "Initializing Branch Predictor" << endl;

    bimodal1 = &liki;
    tage1 = new table1[num_tables];
    for(uint32_t i = 0; i < num_tables; i++){
        tage1[i].initialize(TAGE_TABLE_SIZE[i], HIST[num_tables-1 -i], TAGE_TAG_SIZE[i]);
    }
    GHR = new bitset<1001>;
    csrIndex = new CircularShiftRegister_t[num_tables];
    csrTag = new CircularShiftRegister_t*[2];
    csrTag[0] = new CircularShiftRegister_t[num_tables];
    csrTag[1] = new CircularShiftRegister_t[num_tables];
   
    for(uint32_t i = 0; i < num_tables; i++){
        csrIndex[i].val = 0;
        csrIndex[i].oldlen = tage1[i].hist;
        csrIndex[i].newlen = tage1[i].tag_bits;


        csrTag[0][i].val = 0;
        csrTag[0][i].oldlen = tage1[i].hist;
        csrTag[0][i].newlen = tage1[i].tag_bits;

        csrTag[1][i].val = 0;
        csrTag[1][i].oldlen = tage1[i].hist;
        csrTag[1][i].newlen = (tage1[i].tag_bits)-1;
        //cout << i<<" "<<csrIndex[i].newlen << endl;
           }
    tage_tag = new uint32_t[num_tables];
    PHR = 0;
    GHR->reset();
    altBetterCount = 8;
    //cout << "Branch Predictor Initialized" << endl;
    
}   

uint8_t O3_CPU::predict_branch(uint64_t ip){
    // cou
    predval.tabpred = num_tables;
    predval.index_pred = 0;
    predval.alttabpred = num_tables;
    predval.alt_index_pred = 0;
    predval.pred_pred = -1 ;
    predval.alt_pred =  -1;

    predictionval stat;
    //cout << "Predicting Branch" << endl;
    uint32_t size = (1 << bimodal1->bimodal_size);
    uint32_t bimodal_index = ip % size;
    
    
    for(uint32_t i = 0; i < num_tables; i++){
        tage_tag[i] = (ip ^ csrTag[0][i].val ^ (csrTag[1][i].val << 1)) & ((1 << tage1[i].tag_bits) -1);

    }
    for(uint32_t i = 0; i < num_tables; i++){
        tage1[i].tage_index =  (ip ^ (ip >> tage1[i].size) ^ csrIndex[i].val ^ PHR ^ (PHR & ((1<< 0)-1))) & ((1 << tage1[i].size)-1);     
    }   
    // uint32_t prediction = 0;
    // int tabpred = -1;
    // uint32_t index_pred;
    // int alttabpred = -1;
    // uint32_t alt_index_pred;
    // int altpred = -1;
    
    
    for(uint32_t i = 0; i < num_tables; i++){
        if(tage1[i].blocks[tage1[i].tage_index].tag == tage_tag[i]){
            stat.tabpred = i;
          
            stat.index_pred = tage1[i].tage_index;
            break;
        }
    }
    ////cout << stat.tabpred << endl;
    for(uint32_t i = stat.tabpred + 1; i < num_tables; i++){
        if(tage1[i].blocks[tage1[i].tage_index].tag == tage_tag[i]){
            stat.alttabpred = i;
           // //cout << "h2" << endl;
            stat.alt_index_pred = tage1[i].tage_index;
            break;
        }
    }
    // //cout << stat.alttabpred  << endl;
    // //cout << (stat.tabpred != num_tables) << endl;
    if(stat.tabpred < num_tables){
        // //cout << stat.tabpred << " " << num_tables << endl;
        // //cout << "h3" << endl;
        // int prediction = tage1[stat.tabpred].blocks[stat.index_pred].prediction;
        
            if(stat.alttabpred == num_tables){
                stat.alt_pred = (bimodal1->bimodel[bimodal_index].predic > 3/2);
            }
            else{
                if(tage1[stat.alttabpred].blocks[stat.alt_index_pred].prediction >= 7/2){
                    stat.alt_pred = 1;
                }
                else{
                    stat.alt_pred = 0;
                }

            }
        
         int prediction = tage1[stat.tabpred].blocks[stat.index_pred].prediction;
         if(((prediction != 3) &&  
            (prediction != 4)) ||     
            (tage1[stat.tabpred].blocks[stat.index_pred].counter != 0) ||                     
            (altBetterCount < 8)) {            // Decide between altPred and Pred                
            if(prediction >= 7/2) { 
                stat.pred_pred   = 1;
                predval.tabpred = stat.tabpred;
                // //cout << "else13: " << stat.tabpred << endl;
                // //cout << "else13: " << num_tables << endl;
                predval.index_pred = stat.index_pred;
                predval.alt_pred = stat.alt_pred;
                predval.alttabpred = stat.alttabpred;
                predval.alt_index_pred = stat.alt_index_pred;
                predval.pred_pred = stat.pred_pred;
                //cout << "h4" << endl;
                return predDir = 1; 
            } 
            else if(prediction < 7/2) { 
                stat.pred_pred   = 0;
                predval.tabpred = stat.tabpred;
                // //cout << "else12: " << stat.tabpred << endl;
                // //cout << "else12: " << num_tables << endl;
                predval.index_pred = stat.index_pred;
                predval.alt_pred = stat.alt_pred;
                predval.alttabpred = stat.alttabpred;
                predval.alt_index_pred = stat.alt_index_pred;
                predval.pred_pred = stat.pred_pred;
                //cout << "h5" << endl;
                return predDir = 0; 
            } 
            else { 
                //cout << "h6" << endl;
                
                bool p = bimodal1->bimodel[bimodal_index].predic > 3/2;;  
                predDir = p;
                return p;
            }
    }
    }
    else{
        stat.alt_pred = bimodal1->bimodel[bimodal_index].predic > 3/2;
        predval.tabpred = stat.tabpred;
                // //cout << "else123: " << stat.tabpred << endl;
                // //cout << "else123: " << num_tables << endl;
                predval.index_pred = stat.index_pred;
                predval.alt_pred = stat.alt_pred;
                predval.alttabpred = stat.alttabpred;
                predval.alt_index_pred = stat.alt_index_pred;
                predval.pred_pred = stat.pred_pred;
                
        //cout << "h7" << endl;
        bool h = bimodal1->bimodel[bimodal_index].predic > 3/2;
        predDir = h;
        return h;       
    }

    
    
}

void O3_CPU::last_branch_result(uint64_t ip, uint8_t taken){
    
    //cout << "last_branch_result" << endl;
    ////cout << "last_branch_result" << endl;
    uint32_t a = 1 <<(bimodal1->bimodal_size);
    uint32_t bimodal_index = ip % a;
    uint32_t prediction = -1;
    uint32_t alt_prediction = -1; 
    ////cout << predval.tabpred << "1" << endl;
    if(predval.tabpred < num_tables){
        prediction = tage1[predval.tabpred].blocks[predval.index_pred].prediction;
        if(taken && prediction < 7){
            ++(tage1[predval.tabpred].blocks[predval.index_pred].prediction);
        }
        else if(!taken && prediction > 0){
            --(tage1[predval.tabpred].blocks[predval.index_pred].prediction);
        }
    
        if(predval.alttabpred != num_tables){
            alt_prediction = tage1[predval.alttabpred].blocks[predval.alt_index_pred].prediction;
        }
        
        if(tage1[predval.tabpred].blocks[predval.index_pred].counter == 0 && alt_prediction != -1){
            if(taken && alt_prediction < 7){
                ++(tage1[predval.alttabpred].blocks[predval.alt_index_pred].prediction);
            }
            else if(!taken && alt_prediction > 0){
                --(tage1[predval.alttabpred].blocks[predval.alt_index_pred].prediction);
            }
        }
    }
    else{
        prediction = bimodal1->bimodel[bimodal_index].predic;
        if(taken && prediction < 3){
            ++(bimodal1->bimodel[bimodal_index].predic);
        }
        else if(!taken && prediction > 0){
            --(bimodal1->bimodel[bimodal_index].predic);
        }
    }
    
    if(predval.tabpred < num_tables){
        if(tage1[predval.tabpred].blocks[predval.index_pred].counter == 0 && prediction == 3 || prediction == 4){
            if(predval.pred_pred != predval.alt_pred){
                if(predval.alt_pred == taken){
                    if(altBetterCount < 15){
                        altBetterCount++;
                    }
                    
                }
                else if(altBetterCount > 0){
                    altBetterCount--;
                }
            }
        }
    }
    if((predDir != taken) & (predval.tabpred > 0)){
      bool alloc = false;
        for(int i = 0; i < predval.tabpred; i++){
            if(tage1[i].blocks[tage1[i].tage_index].counter == 0){
            alloc = true;
            break;
            }
        }
        if(!alloc){
            for(int j = (predval.tabpred) -1; j >= 0; j--){
                tage1[j].blocks[tage1[j].tage_index].counter--;
            }
        }
        else{
           for(int j = (predval.tabpred) -1; j >= 0; j--){
            ////cout << j << " " << "seg" << endl; 
            if(tage1[j].blocks[tage1[j].tage_index].counter == 0 && !(rand()%10)){
                if(taken){
                    tage1[j].blocks[tage1[j].tage_index].prediction = 4;
                }   
                else{
                    tage1[j].blocks[tage1[j].tage_index].prediction = 3;
                }
                tage1[j].blocks[tage1[j].tage_index].counter = 0;
                tage1[j].blocks[tage1[j].tage_index].tag =  tage_tag[j];
                break; 
            }
               
            }

        }
    }

    

    if(predval.tabpred < num_tables){
        if(predDir != predval.alt_pred){
            if(tage1[predval.tabpred].blocks[predval.index_pred].counter < 3 && predDir == taken){
                tage1[predval.tabpred].blocks[predval.index_pred].counter += 1;
            }
            if(tage1[predval.tabpred].blocks[predval.index_pred].counter > 0 && predDir != taken){
                tage1[predval.tabpred].blocks[predval.index_pred].counter -= 1;
            }
        }
    }
    

    *GHR = (*GHR << 1); // Shift GHR
      if(taken == 1)
        GHR->set(0,1); 

     
   for (int i = 0; i < num_tables; i++) { // Perform folding on Circular Shift Registers
        csrIndex[i].val = (csrIndex[i].val << 1) + (*GHR)[0];
        ////cout << csrIndex[i].newlen << "hi" << i << " " << endl;
        csrIndex[i].val ^= ((csrIndex[i].val & (1 << csrIndex[i].newlen)) >> csrIndex[i].newlen);
        //cout << csrIndex[i].newlen << "hi" << endl;
        csrIndex[i].val ^= ((*GHR)[csrIndex[i].oldlen] << (csrIndex[i].oldlen % csrIndex[i].newlen));
        csrIndex[i].val &= ((1 << csrIndex[i].newlen) -1);

        csrTag[0][i].val = (csrTag[0][i].val << 1) + (*GHR)[0];
        csrTag[0][i].val ^= ((csrTag[0][i].val & (1 << csrTag[0][i].newlen)) >> csrTag[0][i].newlen);
        csrTag[0][i].val ^= ((*GHR)[csrTag[0][i].oldlen] << (csrTag[0][i].oldlen % csrTag[0][i].newlen));
        csrTag[0][i].val &= ((1 << csrTag[0][i].newlen) -1);

        csrTag[1][i].val = (csrTag[1][i].val << 1) + (*GHR)[0];
        csrTag[1][i].val ^= ((csrTag[1][i].val & (1 << csrTag[1][i].newlen)) >> csrTag[1][i].newlen);
        csrTag[1][i].val ^= ((*GHR)[csrTag[1][i].oldlen] << (csrTag[1][i].oldlen % csrTag[1][i].newlen));
        csrTag[1][i].val &= ((1 << csrTag[1][i].newlen) -1);
    }
    
    // Update Path History
    PHR = (PHR << 1);
    if(ip & 1) 
        PHR = PHR + 1;
    PHR = (PHR & ((1 << 16) - 1));
    //cout << "ending last_branch" << endl;

    bimodal1->clock++;
    if(bimodal1->clock == (20)){
        bimodal1->clock = 0;
        bimodal1->clock_state = 1-(bimodal1->clock_state);
        for(int i = 0; i <num_tables; i++){
            for(int j = 0; j < (1 <<tage1[i].size); j++){
                tage1[i].blocks[j].counter &= bimodal1->clock_state + 1;
                
            }
        }
    }
    //cout << "ending last_branch" << endl;
    return;
}





    
    // initialize the branch predictor
    // you can
